description: "NumPy 3D ndarray values (Array3)"
name: "NumpyNdarray3D"
rust_type: "ndarray::Array3<i32>"
rust_decode: "FromTableNs::from_table_ns"
rust_encode: "to_table_ns"
rust_to_json: "serde_json::to_value(v.outer_iter().map(|outer| outer.rows().into_iter().map(|row| row.to_vec()).collect::<Vec<_>>()).collect::<Vec<_>>())?"
rust_from_json: "{ let vv: Vec<Vec<Vec<i32>>> = serde_json::from_value(value.clone())?; let dim0 = vv.len(); let dim1 = vv.get(0).map(|r| r.len()).unwrap_or(0); let dim2 = vv.get(0).and_then(|r| r.get(0)).map(|r| r.len()).unwrap_or(0); ndarray::Array3::from_shape_vec((dim0, dim1, dim2), vv.into_iter().flatten().flatten().collect())? }"
py_prepare: "np.array(value, dtype=np.int32)"
py_compare: "expected == actual.tolist() if hasattr(actual, 'tolist') else expected == actual"
tests:
  # 3D arrays
  - [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]
  - [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]
  - [[[10, 20], [30, 40]], [[50, 60], [70, 80]]]
